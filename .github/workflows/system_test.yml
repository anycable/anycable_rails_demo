name: System Tests

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUNDLE_JOBS: 4
      BUNDLE_RETRY: 3
      CI: true
      DATABASE_URL: postgres://postgres:postgres@localhost:5432
      CHROME_URL: http://localhost:3000
      RAILS_ENV: test
      ANYCABLE_RPC_HOST: 0.0.0.0:50051
    services:
      postgres:
        image: postgres:13.0
        env:
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:5.0-alpine
        ports: ["6379:6379"]
        options: --health-cmd="redis-cli ping" --health-interval 1s --health-timeout 3s --health-retries 30
      chrome:
        image: browserless/chrome:1.31-chrome-stable
        ports: ["3000:3000"]
        options: -e CONNECTION_TIMEOUT=600000
      anycable:
        image: ghcr.io/anycable/anycable-go-pro:1.1.0-beta.2
        credentials:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.ghcr_password }}
        ports: ["8080:8080"]
        options: --add-host=host.docker.internal:host-gateway
        env:
          ANYCABLE_HOST: "0.0.0.0"
          ANYCABLE_REDIS_URL: redis://redis:6379/0
          ANYCABLE_RPC_HOST: host.docker.internal:50051
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: /home/runner/bundle
          key: bundle-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            bundle-
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0.1
      - name: Install PostgreSQL client
        run: |
          sudo apt-get -yqq install libpq-dev
      - name: Bundle install
        run: |
          bundle config path /home/runner/bundle
          bundle config set frozen 'true'
          bundle install
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-
      - name: Yarn install
        run: |
          yarn install
      - name: Run RSpec
        run: |
          bundle exec rails db:prepare
          bundle exec rails webpacker:compile
          export CABLE_URL="ws://$(hostname):8080/cable"
          bundle exec rspec --tag type:system
